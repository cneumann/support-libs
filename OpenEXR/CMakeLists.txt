
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF(OPENEXR_SRC_DIR AND ILMBASE_SRC_DIR)

    PROJECT(OPENEXR)

    SET(HALF_TARGET_NAME_SHARED ilmhalf)
    SET(HALF_TARGET_NAME_STATIC libilmhalf)

    ## eLut generator program
    SET(ELUT_TARGET_NAME eLut)
    SET(ELUT_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/Half/eLut.cpp")
    ADD_EXECUTABLE(${ELUT_TARGET_NAME} ${ELUT_CXX_SRC_FILES})
    GET_TARGET_PROPERTY(ELUT_COMMAND ${ELUT_TARGET_NAME} LOCATION)
    
    SET(ELUT_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/eLut.h")

    ADD_CUSTOM_COMMAND(
        OUTPUT "${ELUT_OUTPUT}"
        COMMAND "${ELUT_COMMAND}" ">" "${ELUT_OUTPUT}"
        COMMAND "${CMAKE_COMMAND}" "-E" "echo" "Generating ${ELUT_OUTPUT}"
        DEPENDS ${ELUT_TARGET_NAME}
        COMMENT "Generating eLut.h")

    ## toFloat generator program
    SET(TOFLOAT_TARGET_NAME toFloat)
    SET(TOFLOAT_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/Half/toFloat.cpp")
    ADD_EXECUTABLE(${TOFLOAT_TARGET_NAME} ${TOFLOAT_CXX_SRC_FILES})
    GET_TARGET_PROPERTY(TOFLOAT_COMMAND ${TOFLOAT_TARGET_NAME} LOCATION)

    SET(TOFLOAT_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/toFloat.h")

    ADD_CUSTOM_COMMAND(
        OUTPUT "${TOFLOAT_OUTPUT}"
        COMMAND "${TOFLOAT_COMMAND}" ">" "${TOFLOAT_OUTPUT}"
        COMMAND "${CMAKE_COMMAND}" "-E" "echo" "Generating ${TOFLOAT_OUTPUT}"
        DEPENDS ${TOFLOAT_TARGET_NAME}
        COMMENT "Generating toFLoat.h")

    ADD_CUSTOM_TARGET(HALF_GENERATED_FILES DEPENDS "${ELUT_OUTPUT}" "${TOFLOAT_OUTPUT}")

    ## createDLL helper program
    SET(CREATEDLL_TARGET_NAME createDLL)
    SET(CREATEDLL_CXX_SRC_FILES)
    LIST(APPEND CREATEDLL_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/vc/createDLL/createDLL.cpp")
    LIST(APPEND CREATEDLL_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/vc/createDLL/OptionParser.cpp")
    ADD_EXECUTABLE(${CREATEDLL_TARGET_NAME} ${CREATEDLL_CXX_SRC_FILES})
    GET_TARGET_PROPERTY(CREATEDLL_COMMAND ${CREATEDLL_TARGET_NAME} LOCATION)

    SET(HALF_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/Half/half.cpp")

    SET(IEX_CXX_SRC_FILES)
    LIST(APPEND IEX_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/Iex/IexBaseExc.cpp")
    LIST(APPEND IEX_CXX_SRC_FILES "${ILMBASE_SRC_DIR}/Iex/IexThrowErrnoExc.cpp")
    
    INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}")

    IF(BUILD_SHARED_LIBS)
        ADD_LIBRARY(${HALF_TARGET_NAME_SHARED} SHARED ${HALF_CXX_SRC_FILES})

        SET_TARGET_PROPERTIES(${HALF_TARGET_NAME_SHARED}  PROPERTIES
            DEFINE_SYMBOL "OPENEXR_DLL;HALF_EXPORTS"
            DEBUG_POSTFIX "d")

        ADD_DEPENDENCIES(${HALF_TARGET_NAME_SHARED} HALF_GENERATED_FILES)

        INSTALL(TARGETS ${HALF_TARGET_NAME_SHARED}
            CONFIGURATIONS Release Debug
            RUNTIME DESTINATION bin
            LIBRARY DESTINATION lib
            ARCHIVE DESTINATION lib)

        ADD_LIBRARY(${IEX_TARGET_NAME_SHARED} SHARED ${IEX_CXX_SRC_FILES})
        SET_TARGET_PROPERTIES(${HALF_TARGET_NAME_SHARED}  PROPERTIES
            DEFINE_SYMBOL "OPENEXR_DLL"
            DEBUG_POSTFIX "d")
    ENDIF(BUILD_SHARED_LIBS)

    IF(BUILD_STATIC_LIBS)
        ADD_LIBRARY(${HALF_TARGET_NAME_STATIC} STATIC ${HALF_CXX_SRC_FILES})

        SET_TARGET_PROPERTIES(${HALF_TARGET_NAME_STATIC}  PROPERTIES
            DEBUG_POSTFIX "d")

        ADD_DEPENDENCIES(${HALF_TARGET_NAME_STATIC} HALF_GENERATED_FILES)

        INSTALL(TARGETS ${HALF_TARGET_NAME_STATIC}
            CONFIGURATIONS Release Debug
            RUNTIME DESTINATION bin
            LIBRARY DESTINATION lib
            ARCHIVE DESTINATION lib)

        ADD_LIBRARY(${IEX_TARGET_NAME_STATIC} STATIC ${IEX_CXX_SRC_FILES})
        SET_TARGET_PROPERTIES(${HALF_TARGET_NAME_STATIC}  PROPERTIES
            DEBUG_POSTFIX "d")
    ENDIF(BUILD_STATIC_LIBS)

ELSE(OPENEXR_SRC_DIR AND ILMBASE_SRC_DIR)
    MESSAGE(STATUS "OPENEXR_SRC_DIR or ILMBASE_SRC_DIR not set - can not build OpenEXR")
ENDIF(OPENEXR_SRC_DIR AND ILMBASE_SRC_DIR)
